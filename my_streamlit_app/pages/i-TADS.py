import sys
import os

# Fix import path to include parent folder
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import streamlit as st
import pandas as pd
import joblib

from src.anomaly_detector import preprocess_data
from src.cyber_defense import CyberDefense

st.set_page_config(page_title="i-TADS Dashboard", layout="wide")
st.title("📡 i-TADS: Telecom Anomaly Detection Dashboard")

@st.cache_resource
def load_model():
    current_dir = os.path.dirname(__file__)
    model_path = os.path.join(current_dir, '..', 'models', 'anomaly_detector.pkl')
    return joblib.load(model_path)

model = load_model()

uploaded_file = st.file_uploader("📂 Upload Telecom Traffic CSV", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.subheader("📑 Uploaded Traffic Data")
    st.dataframe(df.head(20))

    X, _ = preprocess_data(df)
    predictions = model.predict(X)
    df["predicted_anomaly"] = [1 if p == -1 else 0 for p in predictions]

    total = len(df)
    anomalies = df["predicted_anomaly"].sum()
    st.metric("🔍 Total Packets", total)
    st.metric("⚠️ Detected Anomalies", anomalies)

    st.subheader("🚨 Anomalies Detected")
    st.dataframe(df[df["predicted_anomaly"] == 1])

    st.subheader("📊 Packet Size vs Latency (Anomalies Highlighted)")
    st.scatter_chart(df[["packet_size", "latency_ms"]], use_container_width=True)

    defense = CyberDefense()
    defense.analyze_traffic(df)

    st.subheader("🛡️ Cyber Defense Actions")
    st.write(f"Blocked IPs: {defense.get_blocklist()}")

    st.subheader("🚨 Alerts")
    for alert in defense.get_alerts():
        st.warning(alert)
else:
    st.info("Please upload a telecom traffic CSV file (like the one generated by traffic_simulator.py)")